[["converting-tensors.html", "Chapter 3 Converting tensors 3.1 Tensor to numpy array 3.2 numpy array to tensor 3.3 R objects to numpy objects 3.4 Tensor data types 3.5 Arithmetic of tensors 3.6 NumPy and PyTorch 3.7 Create tensors 3.8 Tensor resizing 3.9 Concatenate tensors 3.10 Reshape tensors 3.11 Special tensors 3.12 Access to tensor elements 3.13 Other tensor operations 3.14 Logical operations 3.15 Distributions", " Chapter 3 Converting tensors Last update: Thu Oct 22 16:46:28 2020 -0500 (54a46ea04) library(rTorch) 3.1 Tensor to numpy array This is a frequent operation. I have found that this is necessary when: a numpy function is not implemented in PyTorch We need to convert a tensor to R Perform a boolean operation that is not directly available in PyTorch x &lt;- torch$arange(1, 10) y &lt;- x^2 plot(x, y) #&gt; Error in as.double(x): cannot coerce type &#39;environment&#39; to vector of type &#39;double&#39; 3.2 numpy array to tensor Explain how transform a tensor back and forth to numpy. Why is this important? In what cases in this necessary? 3.2.1 numpy array to R This is mainly required for these reasons: Create a data structure in R Plot using r-base or ggplot2 Perform an analysis on parts of a tensor Use R statistical functions that are not available in PyTorch 3.3 R objects to numpy objects TODO 3.4 Tensor data types 3.4.1 Major tensor types 3.4.2 Example: A 4D tensor 3.4.3 Example: A 3D tensor 3.5 Arithmetic of tensors 3.5.1 Add tensors 3.5.2 Add tensor elements 3.5.3 Multiply a tensor by a scalar 3.6 NumPy and PyTorch 3.6.1 Python Tuples and R vectors 3.6.2 A numpy array from R vectors 3.6.3 numpy arrays to tensors 3.6.4 Create and fill a tensor 3.6.5 Tensor to array, and viceversa 3.7 Create tensors 3.7.1 Tensor fill 3.7.2 Tensor with a range of values 3.7.3 Linear or log scale Tensor 3.7.4 In-place / Out-of-place fill 3.8 Tensor resizing 3.8.1 Exercise 3.9 Concatenate tensors 3.9.1 Concatenate by rows 3.9.2 Concatenate by columns 3.10 Reshape tensors 3.10.1 With chunk(): 3.10.1.1 Exercise 3.10.2 With index_select(): 3.11 Special tensors 3.11.1 Identity matrix 3.11.2 Ones 3.11.3 Zeros 3.11.4 Diagonal operations 3.11.4.1 Diagonal matrix 3.12 Access to tensor elements 3.12.1 Indices to tensor elements 3.12.2 Using the take function 3.13 Other tensor operations 3.13.1 Cross product 3.13.2 Dot product 3.14 Logical operations 3.14.1 Extract a unique logical result 3.14.2 Greater than (gt) 3.14.3 Less than or equal (le) 3.14.4 Logical NOT (!) 3.15 Distributions 3.15.1 Uniform matrix 3.15.2 Binomial distribution 3.15.3 Exponential distribution 3.15.4 Weibull distribution 3.15.4.1 Constant scale 3.15.4.2 Constant concentration "]]
